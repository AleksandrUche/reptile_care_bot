from aiogram.types import InlineKeyboardButton
from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from factory.callback_factory.company_factory import CompanyCallback
from factory.callback_factory.pet_factory import (
    PaginationCallback,
    PetsCallback,
    EditPetCallback,
    DeletePetCallback,
)
from lexicon.lexicon import LEXICON_RU


def create_inline_kb(width: int, *args: str, **kwargs: str) -> InlineKeyboardMarkup:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    :param width: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –ø–æ —à–∏—Ä–∏–Ω–µ.
    :param args: –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è [LEXICON].
    :param kwargs: –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ value_button='text button'.
    """
    kb_builder = InlineKeyboardBuilder()
    buttons: list[InlineKeyboardButton] = []

    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–∫–∞–º–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ args –∏ kwargs
    if args:
        for button in args:
            buttons.append(InlineKeyboardButton(
                text=LEXICON_RU[button] if button in LEXICON_RU else button,
                callback_data=button))
    if kwargs:
        for button, text in kwargs.items():
            buttons.append(InlineKeyboardButton(
                text=text,
                callback_data=button))

    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –±–∏–ª–¥–µ—Ä –º–µ—Ç–æ–¥–æ–º row c –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º width
    kb_builder.row(*buttons, width=width)
    return kb_builder.as_markup()


async def show_pets_page_inline_kb(pets: list, page: int = 0, pets_per_page: int = 6):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    :param pets: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∏—Ç–æ–º—Ü–µ–≤.
    :param page: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    :param pets_per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Ç–æ–º—Ü–µ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
    :return: –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
    """
    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∏ –∫–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_index = page * pets_per_page
    end_index = start_index + pets_per_page
    pets_page = pets[start_index:end_index]

    builder = InlineKeyboardBuilder()

    for pet in pets_page:
        builder.button(
            text=pet.name,
            callback_data=PetsCallback(
                id=pet.id, company_id=pet.company_id, group_id=pet.group_id
            )
        )

    if page > 0:
        builder.button(
            text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
            callback_data=PaginationCallback(action='prev', page=page).pack()
        )
    if end_index < len(pets):
        builder.button(
            text='–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è',
            callback_data=PaginationCallback(action='next', page=page).pack()
        )

    builder.button(text='üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main_menu')
    builder.adjust(1)  # –ö–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ

    return builder.as_markup()


async def show_companies_page_inline_kb(companies: list, page: int = 0,
                                        per_page: int = 6):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    :param company: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π.
    :param page: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    :param pets_per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–π –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
    :return: –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
    """
    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∏ –∫–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_index = page * per_page
    end_index = start_index + per_page
    companies_page = companies[start_index:end_index]

    builder = InlineKeyboardBuilder()

    for company in companies_page:
        builder.button(
            text=company.name,
            callback_data=CompanyCallback(
                company_id=company.id, user_id=company.user_id
            )
        )

    if page > 0:
        builder.button(
            text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
            callback_data=PaginationCallback(action='prev', page=page).pack()
        )
    if end_index < len(companies):
        builder.button(
            text='–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è',
            callback_data=PaginationCallback(action='next', page=page).pack()
        )

    builder.button(text='üîô –ú–µ–Ω—é', callback_data='back_to_company_menu')
    builder.adjust(1)

    return builder.as_markup()


async def get_edit_pet_inline_kb(pet_id: int, pet_name: str = None):
    builder = InlineKeyboardBuilder()
    builder.button(
        text='–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è',
        callback_data=EditPetCallback(field='name', pet_id=pet_id).pack()
    )
    builder.button(
        text='–ò–∑–º–µ–Ω–∏—Ç—å –º–æ—Ä—Ñ—É',
        callback_data=EditPetCallback(field='morph', pet_id=pet_id).pack()
    )
    builder.button(
        text='–ò–∑–º–µ–Ω–∏—Ç—å –≤–∏–¥',
        callback_data=EditPetCallback(field='view', pet_id=pet_id).pack()
    )
    builder.button(
        text='–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª',
        callback_data=EditPetCallback(field='gender', pet_id=pet_id).pack()
    )
    builder.button(
        text='–î–æ–±–∞–≤–∏—Ç—å –≤–µ—Å',
        callback_data=EditPetCallback(field='weight', pet_id=pet_id).pack()
    )
    builder.button(
        text='–î–æ–±–∞–≤–∏—Ç—å –¥–ª–∏–Ω—É',
        callback_data=EditPetCallback(field='length', pet_id=pet_id).pack()
    )
    builder.button(
        text='–î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É –ª–∏–Ω—å–∫–∏',
        callback_data=EditPetCallback(field='molting', pet_id=pet_id).pack()
    )
    builder.button(
        text='–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è',
        callback_data=EditPetCallback(field='birth', pet_id=pet_id).pack()
    )
    builder.button(
        text='–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è',
        callback_data=EditPetCallback(field='purchase', pet_id=pet_id).pack()
    )
    builder.button(
        text='–£–¥–∞–ª–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ ‚ùå',
        callback_data=DeletePetCallback(action='menu', pet_id=pet_id, pet_name=pet_name).pack()
    )
    builder.button(
        text='–ù–∞–∑–∞–¥',
        callback_data='back_to_all_pets'
    )
    builder.adjust(2)  # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    return builder.as_markup()


async def get_delete_pet_inline_kb(pet_id: int, pet_name: str):
    builder = InlineKeyboardBuilder()
    builder.button(
        text='‚úÖ –î–ê',
        callback_data=DeletePetCallback(action='delete', pet_id=pet_id, pet_name=pet_name).pack()
    )
    builder.button(
        text='‚ùå –ù–ï–¢',
        callback_data=DeletePetCallback(action='cancel', pet_id=pet_id, pet_name=pet_name).pack()
    )
    builder.adjust(2)
    return builder.as_markup()