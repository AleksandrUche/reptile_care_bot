import logging

from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import CallbackQuery, Message
from sqlalchemy.ext.asyncio import AsyncSession

from keyboards.inline_keyboards import inline_keyboards
from services.pet_services import get_user_company, get_company_and_groups, add_pet
from states.pet_states import AddPetFSM

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(
    F.data.in_({'pets_menu', 'back_to_pets_menu'}), StateFilter(default_state)
)
async def pets_menu(callback: CallbackQuery):
    await callback.answer()
    await  callback.message.edit_text(
        text='–ü–∏—Ç–æ–º—Ü—ã',
        reply_markup=inline_keyboards.main_menu_pets,
    )


@router.callback_query(F.data == 'add_pet', StateFilter(default_state))
async def add_pet_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await  callback.message.edit_text(
        text='ü¶é–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞\n'
             'üîô–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª, –∑–∞—Ç–µ–º ¬´–ù–∞–∑–∞–¥¬ª.\n\n'
             '<b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞:</b>',
        reply_markup=inline_keyboards.menu_add_pet,
    )
    await state.set_state(AddPetFSM.pet_name)


@router.message(StateFilter(AddPetFSM.pet_name), F.text.func(is_alnum_with_spaces))
async def process_pet_name(message: Message, state: FSMContext, session: AsyncSession):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–∏—Ç–æ–º—Ü–∞ (—Å –∏–º–µ–Ω–µ–º) –≤ –∫–æ–º–ø–∞–Ω–∏—é —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –≥—Ä—É–ø–ø–æ–π"""
    await state.update_data(pet_name=message.text)
    state_data = await state.get_data()

    added_pet = await add_pet(message.from_user.id, state_data['pet_name'], session)
    if added_pet:
        await message.answer(
            f"–ü–∏—Ç–æ–º–µ—Ü '{state_data['pet_name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=inline_keyboards.main_menu_pets,
        )
    else:
        await message.answer(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞!\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üòâ, –µ—Å–ª–∏ —á—Ç–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üòè'
        )
    await state.clear()


@router.callback_query(F.data == 'cancel_add_pet', ~StateFilter(default_state))
async def cancel_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


@router.callback_query(
    F.data.in_({'company', 'back_to_company_menu'}), StateFilter(default_state)
)
async def company_main_menu(callback: CallbackQuery):
    await callback.answer()
    await  callback.message.edit_text(
        text='–ö–æ–º–ø–∞–Ω–∏–∏ üèô',
        reply_markup=inline_keyboards.menu_company,
    )

@router.callback_query(
    F.data == 'my_companies', StateFilter(default_state)
)
async def my_company(callback: CallbackQuery, session: AsyncSession):
    await callback.answer()
    my_company = await get_user_company(callback.from_user.id, session)
    companies = ['–í—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏: üèô']

    for company in my_company:
        companies.append(company.name)

    await  callback.message.edit_text(
        text= '\n'.join(companies),
    )
