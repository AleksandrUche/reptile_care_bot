import logging
from datetime import datetime

from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import CallbackQuery, Message
from sqlalchemy.ext.asyncio import AsyncSession

from config_data.config import TIME_ZONE
from factory.callback_factory.pet_factory import (
    PaginationCallback,
    PetsCallback,
    EditPetCallback,
    DeletePetCallback,
    GenderSelectionCallback,
)
from filters.pet_filters import is_alnum_with_spaces
from keyboards.inline_keyboards import inline_keyboards
from keyboards.keyboard_utils.inline_kb_utils import (
    show_pets_page_inline_kb,
    get_edit_pet_inline_kb,
    get_delete_pet_inline_kb,
    get_gender_select_pet_inline_kb,
    get_return_detail_view_pet_inline_kb,
)
from services.pet_services import (
    add_pet,
    get_my_companies_and_pets,
    get_pet,
    edit_pet_value,
    delete_pet,
    add_weight_pet,
    add_length_pet,
)
from states.pet_states import (
    PetAddFSM,
    PetEditNameFSM,
    PetEditMorphFSM,
    PetEditViewFSM,
    PetEditBirthFSM,
    PetEditPurchaseFSM,
    PetEditWeightFSM,
    PetEditLengthFSM,
)

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(
    F.data.in_({'pets_menu', 'back_to_pets_menu'}), StateFilter(default_state)
)
async def pets_menu(callback: CallbackQuery):
    await callback.answer()
    await  callback.message.edit_text(
        text='–ü–∏—Ç–æ–º—Ü—ã',
        reply_markup=inline_keyboards.main_menu_pets,
    )


@router.callback_query(F.data == 'add_pet', StateFilter(default_state))
async def add_pet_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await  callback.message.edit_text(
        text='ü¶é–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞\n'
             'üîô–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª, –∑–∞—Ç–µ–º ¬´–ù–∞–∑–∞–¥¬ª.\n\n'
             '<b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞:</b>',
        reply_markup=inline_keyboards.menu_add_pet,
    )
    await state.set_state(PetAddFSM.pet_name)


@router.message(StateFilter(PetAddFSM.pet_name), F.text.func(is_alnum_with_spaces))
async def process_pet_name(message: Message, state: FSMContext, session: AsyncSession):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–∏—Ç–æ–º—Ü–∞ (—Å –∏–º–µ–Ω–µ–º) –≤ –∫–æ–º–ø–∞–Ω–∏—é —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –≥—Ä—É–ø–ø–æ–π"""
    await state.update_data(pet_name=message.text)
    state_data = await state.get_data()

    added_pet = await add_pet(message.from_user.id, state_data['pet_name'], session)
    if added_pet:
        await message.answer(
            f"–ü–∏—Ç–æ–º–µ—Ü \"{state_data['pet_name']}\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=inline_keyboards.main_menu_pets,
        )
    else:
        await message.answer(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞!\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üòâ, –µ—Å–ª–∏ —á—Ç–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üòè'
        )
    await state.clear()


@router.message(StateFilter(PetAddFSM.pet_name))
async def warning_incorrect_pet_name(message: Message):
    """–°—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–≤–æ–¥–µ –∏–º–µ–Ω–∏ –ø–∏—Ç–æ–º—Ü–∞"""
    await message.answer(
        text='–¢–æ, —á—Ç–æ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–º—è\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –µ—â–µ —Ä–∞–∑\n'
             '–ò–º—è –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä‚ùó'
    )


@router.callback_query(
    F.data.in_({'my_pets_list', 'back_to_all_pets'}), StateFilter(default_state)
)
async def get_all_pets_handler(callback: CallbackQuery, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–∏—Ç–æ–º—Ü–µ–≤"""
    await callback.answer()
    # —Å–¥–µ–ª–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ –∫–µ—à–µ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pets_and_company = await get_my_companies_and_pets(callback.from_user.id, session)

    pets = []
    for company in pets_and_company:
        pets.extend(company.pets)
    inline_kb = await show_pets_page_inline_kb(pets=pets, page=0)

    await callback.message.edit_text(
        text='ü¶é<b>–í—Å–µ –ø–∏—Ç–æ–º—Ü—ã:</b>\n\n'
             f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Ç–æ–º—Ü–µ–≤: {len(pets)}',
        reply_markup=inline_kb,
    )


@router.callback_query(PaginationCallback.filter(F.action == 'next'))
async def next_page_my_pets_handler(
    callback: CallbackQuery,
    callback_data: PaginationCallback,
    session: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–í–ø–µ—Ä–µ–¥'"""
    await callback.answer()
    page = callback_data.page + 1

    pets_and_company = await get_my_companies_and_pets(callback.from_user.id, session)

    pets = []
    for company in pets_and_company:
        pets.extend(company.pets)
    reply_markup = await show_pets_page_inline_kb(pets, page=page)

    await callback.message.edit_text(
        text='ü¶é<b>–í—Å–µ –ø–∏—Ç–æ–º—Ü—ã:</b>\n\n'
             f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Ç–æ–º—Ü–µ–≤: {len(pets)}',
        reply_markup=reply_markup,
    )


@router.callback_query(PaginationCallback.filter(F.action == 'prev'))
async def prev_page_my_pets_handler(
    callback: CallbackQuery,
    callback_data: PaginationCallback,
    session: AsyncSession,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    await callback.answer()
    page = callback_data.page - 1

    pets_and_company = await get_my_companies_and_pets(callback.from_user.id, session)

    pets = []
    for company in pets_and_company:
        pets.extend(company.pets)
    reply_markup = await show_pets_page_inline_kb(pets, page=page)

    await callback.message.edit_text(
        text='ü¶é<b>–í—Å–µ –ø–∏—Ç–æ–º—Ü—ã:</b>\n\n'
             f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Ç–æ–º—Ü–µ–≤: {len(pets)}',
        reply_markup=reply_markup,
    )


@router.callback_query(PetsCallback.filter())
async def detail_pets_handler(
    callback: CallbackQuery, callback_data: PetsCallback, session: AsyncSession
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∏—Ç–æ–º—Ü–∞"""
    await callback.answer()

    pet = await get_pet(
        callback_data.pet_id,
        callback_data.company_id,
        callback_data.group_id,
        session
    )

    inline_kb = await get_edit_pet_inline_kb(
        pet['pet'].id, pet['pet'].name, pet['pet'].company_id, pet['pet'].group_id
    )

    date_birth = edit_date_format(pet["pet"].date_birth)
    date_purchase = edit_date_format(pet["pet"].date_purchase)
    latest_molting_date = edit_date_format(pet["latest_molting_date"])

    await callback.message.edit_text(
        text=f'–ò–º—è –ø–∏—Ç–æ–º—Ü–∞: {pet["pet"].name}\n\n'
             f'–ú–æ—Ä—Ñ–∞: {pet["pet"].morph}\n'
             f'–í–∏–¥: {pet["pet"].view}\n'
             f'–ü–æ–ª: {pet["pet"].gender.value}\n'
             f'–í–µ—Å: {pet["latest_weight"]}\n'
             f'–î–ª–∏–Ω–∞: {pet["latest_length"]}\n'
             f'–õ–∏–Ω—å–∫–∞: {latest_molting_date}\n'
             f'–ö–æ–º–ø–∞–Ω–∏—è: {pet["company_name"]}\n'
             f'–ì—Ä—É–ø–ø–∞: {pet["group_name"]}\n'
             f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {date_birth}\n'
             f'–î–∞—Ç–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è: {date_purchase}\n',
        reply_markup=inline_kb
    )


@router.callback_query(EditPetCallback.filter(F.field == 'name'))
async def edit_pet_name_handler(
    callback: CallbackQuery, callback_data: EditPetCallback, state: FSMContext,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–∏—Ç–æ–º—Ü–∞."""
    await callback.answer()
    await callback.message.edit_text(
        text='ü¶é–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–∏—Ç–æ–º—Ü–∞\n'
             'üîô–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª, –∑–∞—Ç–µ–º ¬´–ù–∞–∑–∞–¥¬ª.\n\n'
             '<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞:</b>',
        reply_markup=inline_keyboards.menu_add_pet,
    )
    await state.update_data(
        pet_id=callback_data.pet_id,
        company_id=callback_data.company_id,
        group_id=callback_data.group_id
    )
    await state.set_state(PetEditNameFSM.pet_name)


@router.message(StateFilter(PetEditNameFSM.pet_name), F.text.func(is_alnum_with_spaces))
async def process_edit_pet_name(
    message: Message, state: FSMContext, session: AsyncSession
):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–∏—Ç–æ–º—Ü–∞."""
    await state.update_data(pet_name=message.text)
    state_data = await state.get_data()

    edit_pet = await edit_pet_value(
        state_data['pet_id'], 'name', state_data['pet_name'], session
    )
    inline_back_kb = await get_return_detail_view_pet_inline_kb(
        state_data['pet_id'], state_data['company_id'], state_data['group_id']
    )
    if edit_pet:
        await message.answer(
            f"–ò–º—è –ø–∏—Ç–æ–º—Ü–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ \"{state_data['pet_name']}\".",
            reply_markup=inline_back_kb,
        )
    else:
        await message.answer(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–∏—Ç–æ–º—Ü–∞!\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üòâ, –µ—Å–ª–∏ —á—Ç–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üòè'
        )
    await state.clear()


@router.message(StateFilter(PetEditNameFSM.pet_name))
async def warning_incorrect_value(message: Message):
    """–°—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞"""
    await message.answer(
        text='–¢–æ, —á—Ç–æ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–º—è\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –µ—â–µ —Ä–∞–∑\n'
             '–ò–º—è –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä‚ùó'

    )


@router.callback_query(EditPetCallback.filter(F.field == 'morph'))
async def edit_pet_morph_handler(
    callback: CallbackQuery,
    callback_data: EditPetCallback,
    state: FSMContext,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ—Ä—Ñ—ã –ø–∏—Ç–æ–º—Ü–∞."""
    await callback.answer()
    await  callback.message.edit_text(
        text='ü¶é–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–æ—Ä—Ñ—ã –ø–∏—Ç–æ–º—Ü–∞\n'
             'üîô–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª, –∑–∞—Ç–µ–º ¬´–ù–∞–∑–∞–¥¬ª.\n\n'
             '<b>–í–≤–µ–¥–∏—Ç–µ –º–æ—Ä—Ñ—É –ø–∏—Ç–æ–º—Ü–∞:</b>',
        reply_markup=inline_keyboards.menu_add_pet,
    )
    await state.update_data(
        pet_id=callback_data.pet_id,
        company_id=callback_data.company_id,
        group_id=callback_data.group_id
    )
    await state.set_state(PetEditMorphFSM.pet_morph)


@router.message(StateFilter(PetEditMorphFSM.pet_morph))
async def process_edit_pet_morph(
    message: Message, state: FSMContext, session: AsyncSession
):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–æ—Ä—Ñ—ã –ø–∏—Ç–æ–º—Ü–∞."""
    await state.update_data(pet_morph=message.text)
    state_data = await state.get_data()

    edit_pet = await edit_pet_value(
        state_data['pet_id'], 'morph', state_data['pet_morph'], session
    )
    inline_back_kb = await get_return_detail_view_pet_inline_kb(
        state_data['pet_id'], state_data['company_id'], state_data['group_id']
    )
    if edit_pet:
        await message.answer(
            f"–¢–µ–ø–µ—Ä—å –º–æ—Ä—Ñ–∞ –ø–∏—Ç–æ–º—Ü–∞: \"{state_data['pet_morph']}\".",
            reply_markup=inline_back_kb,
        )
    else:
        await message.answer(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–æ—Ä—Ñ—ã –ø–∏—Ç–æ–º—Ü–∞!\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üòâ, –µ—Å–ª–∏ —á—Ç–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üòè'
        )
    await state.clear()


@router.callback_query(EditPetCallback.filter(F.field == 'view'))
async def edit_pet_view_handler(
    callback: CallbackQuery,
    callback_data: EditPetCallback,
    state: FSMContext,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∞ –ø–∏—Ç–æ–º—Ü–∞."""
    await callback.answer()
    await  callback.message.edit_text(
        text='ü¶é–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∏–¥–∞ –ø–∏—Ç–æ–º—Ü–∞\n'
             'üîô–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª, –∑–∞—Ç–µ–º ¬´–ù–∞–∑–∞–¥¬ª.\n\n'
             '<b>–í–≤–µ–¥–∏—Ç–µ –≤–∏–¥ –ø–∏—Ç–æ–º—Ü–∞:</b>',
        reply_markup=inline_keyboards.menu_add_pet,
    )
    await state.update_data(
        pet_id=callback_data.pet_id,
        company_id=callback_data.company_id,
        group_id=callback_data.group_id
    )
    await state.set_state(PetEditViewFSM.pet_view)


@router.message(StateFilter(PetEditViewFSM.pet_view))
async def process_edit_pet_view(
    message: Message, state: FSMContext, session: AsyncSession
):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∏–¥–∞ –ø–∏—Ç–æ–º—Ü–∞."""
    await state.update_data(pet_view=message.text)
    state_data = await state.get_data()

    edit_pet = await edit_pet_value(
        state_data['pet_id'], 'view', state_data['pet_view'], session
    )
    inline_back_kb = await get_return_detail_view_pet_inline_kb(
        state_data['pet_id'], state_data['company_id'], state_data['group_id']
    )
    if edit_pet:
        await message.answer(
            f"–¢–µ–ø–µ—Ä—å –≤–∏–¥ –ø–∏—Ç–æ–º—Ü–∞: \"{state_data['pet_view']}\".",
            reply_markup=inline_back_kb,
        )
    else:
        await message.answer(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–∏–¥–∞ –ø–∏—Ç–æ–º—Ü–∞!\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üòâ, –µ—Å–ª–∏ —á—Ç–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üòè'
        )
    await state.clear()


@router.callback_query(EditPetCallback.filter(F.field == 'gender'))
async def edit_pet_gender_handler(
    callback: CallbackQuery,
    callback_data: EditPetCallback,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–∞ –ø–∏—Ç–æ–º—Ü–∞."""
    await callback.answer()

    inline_kb = await get_gender_select_pet_inline_kb(
        callback_data.pet_id, callback_data.company_id, callback_data.group_id
    )
    await  callback.message.edit_text(
        text='ü¶é–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–∞ –ø–∏—Ç–æ–º—Ü–∞\n'
             'üîô–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª, –∑–∞—Ç–µ–º ¬´–ù–∞–∑–∞–¥¬ª.\n\n'
             '<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –ø–∏—Ç–æ–º—Ü–∞:</b>',
        reply_markup=inline_kb,
    )


@router.callback_query(GenderSelectionCallback.filter())
async def process_edit_pet_gender(
    callback: CallbackQuery,
    callback_data: GenderSelectionCallback,
    session: AsyncSession,
):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–∞ –ø–∏—Ç–æ–º—Ü–∞."""
    edit_pet = await edit_pet_value(
        callback_data.pet_id, 'gender', callback_data.action.name, session
    )
    inline_back_kb = await get_return_detail_view_pet_inline_kb(
        callback_data.pet_id, callback_data.company_id, callback_data.group_id
    )
    if edit_pet:
        await callback.message.edit_text(
            f"–¢–µ–ø–µ—Ä—å –ø–æ–ª –ø–∏—Ç–æ–º—Ü–∞: \"{callback_data.action.value}\".",
            reply_markup=inline_back_kb,
        )
    else:
        await callback.message.answer(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–∞ –ø–∏—Ç–æ–º—Ü–∞!\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üòâ, –µ—Å–ª–∏ —á—Ç–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üòè'
        )


@router.callback_query(EditPetCallback.filter(F.field == 'weight'))
async def add_pet_weight_handler(
    callback: CallbackQuery,
    callback_data: EditPetCallback,
    state: FSMContext,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–µ—Å–∞ –ø–∏—Ç–æ–º—Ü–∞."""
    await callback.answer()
    await  callback.message.edit_text(
        text='ü¶é–í–µ—Å –ø–∏—Ç–æ–º—Ü–∞\n'
             '<b>–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–∏—Ç–æ–º—Ü–∞:</b>',
        reply_markup=inline_keyboards.menu_add_pet,
    )
    await state.update_data(
        pet_id=callback_data.pet_id,
        company_id=callback_data.company_id,
        group_id=callback_data.group_id
    )
    await state.set_state(PetEditWeightFSM.pet_weight)


@router.message(StateFilter(PetEditWeightFSM.pet_weight), ~F.text.isalpha())
async def process_add_weight(
    message: Message, state: FSMContext, session: AsyncSession
):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Å–∞ –ø–∏—Ç–æ–º—Ü–∞."""
    await state.update_data(pet_weight=message.text)
    state_data = await state.get_data()
    try:
        weight = float(state_data['pet_weight'].replace(',', '.'))
    except ValueError:
        await message.answer(
            '–ú–∞—Å—Å–∞ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä –∏ –∑–Ω–∞–∫–æ–≤ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è‚ùó\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä: 25,7'
        )

    add_weight = await add_weight_pet(
        state_data['pet_id'], weight, session
    )
    inline_back_kb = await get_return_detail_view_pet_inline_kb(
        state_data['pet_id'], state_data['company_id'], state_data['group_id']
    )
    if add_weight:
        await message.answer(
            f"–ú–∞—Å—Å–∞ –ø–∏—Ç–æ–º—Ü–∞ \"{state_data['pet_weight']}\" –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ.",
            reply_markup=inline_back_kb,
        )
    else:
        await message.answer(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Å—Å—ã –ø–∏—Ç–æ–º—Ü–∞!\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üòâ, –µ—Å–ª–∏ —á—Ç–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üòè'
        )
    await state.clear()


@router.message(StateFilter(PetEditWeightFSM.pet_weight))
async def warning_incorrect_weight(message: Message):
    """–°—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–≤–æ–¥–µ –º–∞—Å—Å—ã –ø–∏—Ç–æ–º—Ü–∞"""
    await message.answer(
        text='–¢–æ, —á—Ç–æ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –º–∞—Å—Å—É\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å—É –µ—â–µ —Ä–∞–∑\n'
             '–ú–∞—Å—Å–∞ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä‚ùó'

    )


@router.callback_query(EditPetCallback.filter(F.field == 'length'))
async def add_pet_length_handler(
    callback: CallbackQuery,
    callback_data: EditPetCallback,
    state: FSMContext,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–ª–∏–Ω—ã –ø–∏—Ç–æ–º—Ü–∞."""
    await callback.answer()
    await  callback.message.edit_text(
        text='ü¶é–î–ª–∏–Ω–∞ –ø–∏—Ç–æ–º—Ü–∞\n'
             '<b>–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∏—Ç–æ–º—Ü–∞:</b>',
        reply_markup=inline_keyboards.menu_add_pet,
    )
    await state.update_data(
        pet_id=callback_data.pet_id,
        company_id=callback_data.company_id,
        group_id=callback_data.group_id
    )
    await state.set_state(PetEditLengthFSM.pet_length)


@router.message(StateFilter(PetEditLengthFSM.pet_length), ~F.text.isalpha())
async def process_add_length(
    message: Message, state: FSMContext, session: AsyncSession
):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –ø–∏—Ç–æ–º—Ü–∞."""
    await state.update_data(pet_length=message.text)
    state_data = await state.get_data()
    try:
        length = float(state_data['pet_length'].replace(',', '.'))
    except ValueError:
        await message.answer(
            '–î–ª–∏–Ω–∞ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä –∏ –∑–Ω–∞–∫–æ–≤ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è‚ùó\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä: 25,7'
        )

    add_length = await add_length_pet(
        state_data['pet_id'], length, session
    )
    inline_back_kb = await get_return_detail_view_pet_inline_kb(
        state_data['pet_id'], state_data['company_id'], state_data['group_id']
    )
    if add_length:
        await message.answer(
            f"–î–ª–∏–Ω–∞ –ø–∏—Ç–æ–º—Ü–∞ \"{state_data['pet_length']}\" –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ.",
            reply_markup=inline_back_kb,
        )
    else:
        await message.answer(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–ª–∏–Ω—ã –ø–∏—Ç–æ–º—Ü–∞!\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üòâ, –µ—Å–ª–∏ —á—Ç–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üòè'
        )
    await state.clear()


@router.message(StateFilter(PetEditLengthFSM.pet_length))
async def warning_incorrect_length(message: Message):
    """–°—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–≤–æ–¥–µ –¥–ª–∏–Ω—ã –ø–∏—Ç–æ–º—Ü–∞"""
    await message.answer(
        text='–¢–æ, —á—Ç–æ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –¥–ª–∏–Ω—É\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –µ—â–µ —Ä–∞–∑\n'
             '–ú–∞—Å—Å–∞ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä‚ùó'
    )


@router.callback_query(EditPetCallback.filter(F.field == 'birth'))
async def edit_pet_birth_handler(
    callback: CallbackQuery,
    callback_data: EditPetCallback,
    state: FSMContext,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞."""
    await callback.answer()
    await  callback.message.edit_text(
        text='ü¶é–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞\n'
             'üîô–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª, –∑–∞—Ç–µ–º ¬´–ù–∞–∑–∞–¥¬ª.\n\n'
             '<b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:</b>',
        reply_markup=inline_keyboards.menu_add_pet,
    )
    await state.update_data(
        pet_id=callback_data.pet_id,
        company_id=callback_data.company_id,
        group_id=callback_data.group_id
    )
    await state.set_state(PetEditBirthFSM.pet_birth)


@router.message(StateFilter(PetEditBirthFSM.pet_birth))
async def process_edit_pet_birth(
    message: Message, state: FSMContext, session: AsyncSession
):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞."""
    try:
        date_birth = datetime.strptime(message.text, '%d.%m.%Y')
        await state.update_data(pet_birth=date_birth)
    except ValueError:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.')
    else:
        state_data = await state.get_data()

        edit_pet = await edit_pet_value(
            state_data['pet_id'], 'date_birth', state_data['pet_birth'], session
        )
        inline_back_kb = await get_return_detail_view_pet_inline_kb(
            state_data['pet_id'], state_data['company_id'], state_data['group_id']
        )

        if edit_pet:
            await message.answer(
                "–¢–µ–ø–µ—Ä—å –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞: "
                f"\"{date_birth.astimezone(TIME_ZONE).strftime('%d.%m.%Y')}\".",
                reply_markup=inline_back_kb,
            )
        else:
            await message.answer(
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞!\n'
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üòâ, –µ—Å–ª–∏ —á—Ç–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üòè'
            )
        await state.clear()


@router.callback_query(EditPetCallback.filter(F.field == 'purchase'))
async def edit_pet_purchase_handler(
    callback: CallbackQuery,
    callback_data: EditPetCallback,
    state: FSMContext,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞."""
    await callback.answer()
    await  callback.message.edit_text(
        text='ü¶é–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞\n'
             'üîô–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª, –∑–∞—Ç–µ–º ¬´–ù–∞–∑–∞–¥¬ª.\n\n'
             '<b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:</b>\n',
        reply_markup=inline_keyboards.menu_add_pet,
    )
    await state.update_data(
        pet_id=callback_data.pet_id,
        company_id=callback_data.company_id,
        group_id=callback_data.group_id
    )
    await state.set_state(PetEditPurchaseFSM.pet_purchase)


@router.message(StateFilter(PetEditPurchaseFSM.pet_purchase))
async def process_edit_purchase_birth(
    message: Message, state: FSMContext, session: AsyncSession
):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞."""
    try:
        date_purchase = datetime.strptime(message.text, '%d.%m.%Y')
        await state.update_data(pet_purchase=date_purchase)
    except ValueError:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.')
    else:
        state_data = await state.get_data()

        edit_pet = await edit_pet_value(
            state_data['pet_id'], 'date_purchase', state_data['pet_purchase'], session
        )
        inline_back_kb = await get_return_detail_view_pet_inline_kb(
            state_data['pet_id'], state_data['company_id'], state_data['group_id']
        )

        if edit_pet:
            await message.answer(
                "–¢–µ–ø–µ—Ä—å –¥–∞—Ç–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞: "
                f"\"{date_purchase.astimezone(TIME_ZONE).strftime('%d.%m.%Y')}\".",
                reply_markup=inline_back_kb,
            )
        else:
            await message.answer(
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞!\n'
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üòâ, –µ—Å–ª–∏ —á—Ç–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üòè'
            )
        await state.clear()


@router.callback_query(DeletePetCallback.filter(F.action == 'menu'))
async def delete_pet_handler(callback: CallbackQuery, callback_data: DeletePetCallback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞."""
    await callback.answer()

    inline_kb = await get_delete_pet_inline_kb(
        callback_data.pet_id, callback_data.pet_name
    )

    await callback.message.edit_text(
        f"<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ \"{callback_data.pet_name}\"?</b>\n",
        reply_markup=inline_kb,
    )


@router.callback_query(DeletePetCallback.filter(F.action == 'delete'))
async def process_delete_confirm_pet(
    callback: CallbackQuery, callback_data: DeletePetCallback, session: AsyncSession
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –£–¥–∞–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞."""
    del_pet = await delete_pet(callback_data.pet_id, session)

    if del_pet:
        await callback.message.edit_text(
            f"–ü–∏—Ç–æ–º–µ—Ü \"{callback_data.pet_name}\" –±—ã–ª —É–¥–∞–ª–µ–Ω ‚úÖ",
            reply_markup=inline_keyboards.main_menu_pets,
        )
    else:
        await callback.message.answer(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞!\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üòâ, –µ—Å–ª–∏ —á—Ç–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üòè'
        )


@router.callback_query(DeletePetCallback.filter(F.action == 'cancel'))
async def process_undo_delete_pet(
    callback: CallbackQuery, callback_data: DeletePetCallback
):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞"""
    await callback.message.edit_text(
        f"–£–¥–∞–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ \"{callback_data.pet_name}\" –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=inline_keyboards.main_menu_pets,
    )


@router.callback_query(F.data == 'cancel_state', ~StateFilter(default_state))
async def cancel_state_handler(message: Message, state: FSMContext):
    """–í—ã—Ö–æ–¥–∏—Ç –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
