import logging

from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import CallbackQuery, Message
from sqlalchemy.ext.asyncio import AsyncSession

from filters.pet_filters import is_alnum_with_spaces
from keyboards.inline_keyboards import inline_keyboards
from keyboards.keyboard_utils.inline_kb_utils import show_pets_page_inline_kb
from services.pet_services import get_user_company, add_pet, get_my_companies_and_pets
from states.pet_states import AddPetFSM

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(
    F.data.in_({'pets_menu', 'back_to_pets_menu'}), StateFilter(default_state)
)
async def pets_menu(callback: CallbackQuery):
    await callback.answer()
    await  callback.message.edit_text(
        text='–ü–∏—Ç–æ–º—Ü—ã',
        reply_markup=inline_keyboards.main_menu_pets,
    )


@router.callback_query(F.data == 'add_pet', StateFilter(default_state))
async def add_pet_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await  callback.message.edit_text(
        text='ü¶é–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞\n'
             'üîô–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª, –∑–∞—Ç–µ–º ¬´–ù–∞–∑–∞–¥¬ª.\n\n'
             '<b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞:</b>',
        reply_markup=inline_keyboards.menu_add_pet,
    )
    await state.set_state(AddPetFSM.pet_name)


@router.message(StateFilter(AddPetFSM.pet_name), F.text.func(is_alnum_with_spaces))
async def process_pet_name(message: Message, state: FSMContext, session: AsyncSession):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–∏—Ç–æ–º—Ü–∞ (—Å –∏–º–µ–Ω–µ–º) –≤ –∫–æ–º–ø–∞–Ω–∏—é —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –≥—Ä—É–ø–ø–æ–π"""
    await state.update_data(pet_name=message.text)
    state_data = await state.get_data()

    added_pet = await add_pet(message.from_user.id, state_data['pet_name'], session)
    if added_pet:
        await message.answer(
            f"–ü–∏—Ç–æ–º–µ—Ü '{state_data['pet_name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=inline_keyboards.main_menu_pets,
        )
    else:
        await message.answer(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞!\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üòâ, –µ—Å–ª–∏ —á—Ç–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üòè'
        )
    await state.clear()


@router.message(StateFilter(AddPetFSM.pet_name))
async def warning_incorrect_pet_name(message: Message):
    """–°—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–≤–æ–¥–µ –∏–º–µ–Ω–∏ –ø–∏—Ç–æ–º—Ü–∞"""
    await message.answer(
        text='–¢–æ, —á—Ç–æ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–º—è\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –µ—â–µ —Ä–∞–∑\n'
             '–ò–º—è –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä‚ùó'
    )


@router.callback_query(F.data == 'my_pets_list', StateFilter(default_state))
async def get_all_pets_handler(callback: CallbackQuery, session: AsyncSession):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–∏—Ç–æ–º—Ü–µ–≤"""
    await callback.answer()
    pets_and_company = await get_my_companies_and_pets(callback.from_user.id, session)

    result = []
    for company in pets:
        result.append(f'{company.name}:\n\n')
        for pet in company.pets:
            result.append(f'- id: {pet.id} –ò–º—è: {pet.name}\n')
        result.append('\n')
    pets = []
    for company in pets_and_company:
        pets.extend(company.pets)
    inline_kb = await show_pets_page_inline_kb(pets, page=0)

    await callback.message.edit_text(
        text=f'ü¶é<b>–ú–æ–∏ –ø–∏—Ç–æ–º—Ü—ã</b>\n\n' + ''.join(result),
        reply_markup=inline_keyboards.back_to_main_menu,
        text='ü¶é<b>–í—Å–µ –ø–∏—Ç–æ–º—Ü—ã:</b>\n\n',
        reply_markup=inline_kb,
    )
    )


@router.callback_query(F.data == 'cancel_state', ~StateFilter(default_state))
async def cancel_state_handler(message: Message, state: FSMContext):
    """–í—ã—Ö–æ–¥–∏—Ç –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


@router.callback_query(
    F.data.in_({'company', 'back_to_company_menu'}), StateFilter(default_state)
)
async def company_main_menu(callback: CallbackQuery):
    await callback.answer()
    await  callback.message.edit_text(
        text='–ö–æ–º–ø–∞–Ω–∏–∏ üè¢',
        reply_markup=inline_keyboards.menu_company,
    )


@router.callback_query(
    F.data == 'my_companies', StateFilter(default_state)
)
async def my_company(callback: CallbackQuery, session: AsyncSession):
    await callback.answer()
    my_company = await get_user_company(callback.from_user.id, session)

    companies = []
    for company in my_company:
        companies.append(company.name)

    await  callback.message.edit_text(
        text='–í—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏: üè¢\n\n' + '\n'.join(companies), )
